/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: 	job_follow.skrit

	Author(s)	: 	Bartosz Kijanka

	Purpose		: 	Dumbly follow an actor until within range.

	(C)opyright 2001 Gas Powered Games, Inc.

  ----------------------------------------------------------------------------
  ============================================================================
*/


Go		m_Go$;
GoMind	m_Mind$;
GoBody  m_Body$;
Job		m_Job$;
Goid	m_Target$;
float	m_FollowDistanceBase$;


////////////////////////////////////////////////////////////////////////////////


#include "k_job_c_mcp_path_utils"
#include "k_job_c_mcp_fidget_utils"


startup state STARTUP$
{
}


////////////////////////////////////////////////////////////////////////////////
//	init


float GetFollowDistance$()
{
	GO party$ = m_Go$.OwningParty;
	float result$;
	
	if( (party$ != NULL) && m_Go$.Inventory.IsPackOnly )
	{
		// TAT 5/9/03 - the new pack animal follows closer than the old one
		//		We can tell the difference b/c the new one doesn't flee when an enemy gets near
		if (m_Go$.Mind.OnEnemyEnteredOCZFlee())
		{
			// Pack Mule
			result$ = ( m_FollowDistanceBase$ + ( ( (1.0 - m_Target$.Go.Mind.Comfort) * 3.0 * m_FollowDistanceBase$ ) ) );
		}
		else
		{
			// New DSX Pack Animal
			result$ = ( m_FollowDistanceBase$ + ( ( (1.0 - m_Target$.Go.Mind.Comfort) * 1.5 * m_FollowDistanceBase$ ) ) );
		}
	}
	else
	{
		result$ = m_FollowDistanceBase$;
	}
	return( result$ );
}


event OnJobInitPointers$( Job job$ )
{
	m_Job$					= job$;
	m_Go$					= job$.Go;
	m_Mind$					= job$.Go.Mind;
	m_Body$					= job$.Go.Body;
	m_FollowDistanceBase$	= job$.Float1;
}


event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );

	m_Target$	= job$.GoalObject;

	if (m_Target$.IsValid())
	{
		ResetPathFindingParameters$();
		SetState RequestAction$;
	}
	else
	{
		SetState Exiting$;
	}
}


////////////////////////////////////////////////////////////////////
//	global response to messages for me
event OnWorldMessage$( eWorldEvent e$, WorldMessage /*msg$*/ )
{
	if( e$ == WE_ENGAGED_LOST || e$ == WE_ENGAGED_INVALID )
	{
		SetState Exiting$;
		return;
	}
}


////////////////////////////////////////////////////////////////////////////////
//	
state RequestAction$
{
	transition
	{
		-> TargetMoved$:	OnWorldMessage( WE_MCP_DEPENDANCY_BROKEN );
		// We are switching to the fidget that is automatic upon arrival
		-> FidgetAgain$:	OnWorldMessage( WE_ANIM_DONE );
		-> FidgetAgain$:	OnWorldMessage( WE_MCP_SECTION_COMPLETED );
	}

	trigger OnTimer$( 1 )
	{
		SetState RequestAction$;
	}

	event OnEnterState$
	{
   
   		eReqRetCode ret$ = MCPManager.MakeRequest(
													m_Go$.Goid,
													PL_APPROACH, 
													m_Target$,
													m_LookAhead$,
													m_MaxApproachTime$,
													GetFollowDistance$() - 0.5 ) ;

		report.ReportF("aimove","[%s] FOLLOW (PL_APPROACH) [%s] returned [%s]\n",
				m_Go$.TemplateName,
				m_Job$.GoalObject.GetGo.TemplateName,//	 MakeSiegePosString(m_Job$.GoalPosition),
				 ToString(ret$) );
		
		if( RequestFailed(ret$) )
		{
			Report.Genericf("[%s] FOLLOW - FAILED could not get to target [%s]. Continuing job, Will try to path again.\n",
				m_Go$.TemplateName, m_Job$.GoalObject.GetGo.TemplateName);
			InterruptAndStartFidgetIfRequired$();
			This.CreateTimer( 1, .5 );
		}
		else if (ret$ == REQUEST_OK_IN_RANGE)
		{
			SetState( Arrived$ );
		}
		else if ( (ret$ == REQUEST_OK) || (ret$ == REQUEST_OK_CROWDED) )
		{
			// just stay in this state we are going to make it to our goal in this move.
		}
		else // anything else we just want to try to get closer.
		{
			SetState( MovingCloser$ );
		}
	}
}

////////////////////////////////////////////////////////////////////////////////
//	
state Arrived$
{

	transition

	{
		-> Arrived$:		OnWorldMessage( WE_JOB_TIMER_DONE );
		-> FidgetAgain$:	OnWorldMessage( WE_ANIM_DONE ); 
		-> FidgetAgain$:	OnWorldMessage( WE_MCP_SECTION_COMPLETED ); 
	}

	trigger OnTimer$( 1 )
	{
		SetState RequestAction$;
	}

	event OnEnterState$
	{
		m_Job$.SetTimer( m_Mind$.SensorScanPeriod );

		float dist$ = m_Mind$.GetDistanceAtPlanEnd( m_Target$.Go );

		Go client$ = m_Target$.Go;

		if( ( dist$ > GetFollowDistance$() ) && ( m_Mind$.GetDistance( m_Target$.Go ) > (GetFollowDistance$()-0.5) ) )
		{
			////////////////////////////////////////
			//	try to stay close to client

			this.CreateTimer( 1, m_Mind$.SensorScanPeriod );
		}
		else if ( !m_Target$.Go.Mind.AmBusy )
		{
			SetState Exiting$;
			return;
		}
	}
}


////////////////////////////////////////////////////////////////////////////////
//	
state FidgetAgain$
{
	event OnEnterState$
	{
		StartFidgetIfRequired$();
		SetState Arrived$;
	}
}


////////////////////////////////////////////////////////////////////////////////
//	
state Exiting$
{
	event OnEnterState$
	{
		m_Job$.MarkForDeletion();
	}
}
