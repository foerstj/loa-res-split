/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: 	job_talk_kron.skrit

	Author(s)	: 	Jason Dunlop

	Purpose		: 	kron talk skrit (A1_R1 NPC)

	(C)opyright 2003 Mad Doc Software, LLC/Gas Powered Games, Inc.

  ----------------------------------------------------------------------------
  ============================================================================
*/

Go		m_Go$;
GoMind	m_Mind$;
GoBody  m_Body$;
Job		m_Job$;
Goid	m_Target$;

#include "k_job_c_mcp_fidget_utils"
#include "k_job_c_talk_utils"
#include "k_job_c_talk_utils_DSX"

startup state STARTUP$
{
}

////////////////////////////////////////////////////////////////////////////////
//	init

event OnJobInitPointers$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.Go;
	m_Mind$		= job$.Go.Mind;
	m_Body$		= job$.Go.Body;
}


event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );

	m_Target$	= job$.GoalObject;

	SetState Talk$;  
}


////////////////////////////////////////////////////////////////////////////////
//	face the audience
state Face$
{
	transition
	{
		-> Talk$:	OnWorldMessage( WE_MCP_FACING_LOCKEDON );
	}

	event OnEnterState$
	{		
		if( !m_Go$.HasConversation )
		{
			report.errorf( "Actor '%s', scid:0x%08x was told to run job_talk but he doesn't have a conversation component.",
							m_Go$.GetTemplateName,
							m_Go$.Goid );
			SetState Exiting$;
		}
		MCPManager.MakeRequest( m_Go$.Goid, PL_FACE, m_Target$ );	
	}
}


////////////////////////////////////////////////////////////////////////////////
//	blab blab away... pretend you're Lee
state Talk$
{
	transition
	{
		-> Exiting$:	OnWorldMessage( WE_REQ_TALK_END ) =
		{
			if( m_Go$.Mind.ActorAutoFidgets )
			{
				StartFidgetIfRequired$();
			}
		}
	}
	
	trigger OnWorldMessage$( WE_ANIM_DONE )
	{
		TryAnim$('sit3');
	}

	event OnEnterState$
	{
		// the bear is dead, the quest is not active, but it may not be completed.
		// or the quest has already been completed (possibly in another game and therefore the bool may not be set)
		if( (GameAuditor.GetDb.GetBool("a1_bear_dead_0x3000db" ) && 
			!Victory.IsQuestActive("a1_bear", m_Target$)) ||
		    Victory.IsQuestCompleted( "a1_bear", m_Target$ ) )
		{
			// beat the game, player is so cool
			if( Victory.IsQuestCompleted( "a1_staff", m_Target$ ) 
				|| Victory.GetQuestOrder( "a1_staff", m_Target$) > 10 )
			{
				m_Go$.GetConversation.RSSelectConversation( "kron_game_complete" );
				TryAnim$('sit3');
			}
			// otherwise, game is in progress
			// if bear quest is finished
			else if( Victory.IsQuestCompleted( "a1_bear", m_Target$ ) )
			{
				m_Go$.GetConversation.RSSelectConversation( "kron_after_a1_bear_b" );
				TryAnim$('sit3');
			}
			// otherwise the bear was killed before the quest and the player never got it
			else
			{
				m_Go$.GetConversation.RSSelectConversation( "kron_after_a1_bear_noquest" );
				TryAnim$('sit3');
			}	
		}
		// if the bear is killed 
		// first time talking to me! give bear quest
		else if( !Victory.IsQuestActive( "a1_bear", m_Target$ ) )
		{
			m_Go$.GetConversation.RSSelectConversation( "kron_before_a1_bear" );
			TryAnim$('sit3');
		}
		// they still havent killed the bear
		else if( Victory.GetQuestOrder( "a1_bear", m_Target$ ) == 0 )
		{
			m_Go$.GetConversation.RSSelectConversation( "kron_during_a1_bear" );
			TryAnim$('sit3');
		}
		// killing bears is good. give them gold.
		else if( Victory.GetQuestOrder( "a1_bear", m_Target$ ) == 1 )
		{
			// We give the reward now
			SiegePos SpawnPos$;
	
			// give gold nuggets
			GoCloneReq cloneReq$ = MakeGoCloneReq( "gold" );
						
			SpawnPos$ = m_Target$.go.placement.position;
			cloneReq$.StartingPos	= SpawnPos$;
					
			if ( m_Target$.Go.Hasmind )
			{
				if( AIQuery.FindSpotRelativeToSource( m_Target$.Go, 1, 1.5, 2.0, m_Target$.Go.Mind.TempPos1 ) )
			   	{
			   		cloneReq$.StartingPos = m_Target$.Go.Mind.TempPos1;
			   	}
			}	
			cloneReq$.SnapToTerrain = true;
		   	Goid gold$ = GoDb.SCloneGo( cloneReq$ );
		   	// we give lots of gold nuggets to the player
		   	gold$.Go.Aspect.SetGoldValue(90);
			
			m_Go$.GetConversation.RSSelectConversation( "kron_after_a1_bear_a" );
			TryAnim$('sit3');
		}
		// this state can't really be reached, but i am putting it here for safety.
		else
		{
			m_Go$.GetConversation.RSSelectConversation( "kron_after_a1_bear_b" );
			TryAnim$('sit3');
		}
		
		m_Go$.GetConversation.RSActivateDialogue();
	}
}


////////////////////////////////////////////////////////////////////////////////
//	finish blabbing
state Exiting$
{
	event OnEnterState$
	{
		m_Job$.MarkForDeletion();
	}
}


