//////////////////////////////////////////////////////////////////////////////
//
// File     :  check_quest.skrit
// Author(s):  David Tomandl, Tara Teich
//
// Copyright © 2000 Gas Powered Games, Inc.  All rights reserved.
//----------------------------------------------------------------------------
//  $Revision:: $              $Date:$
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// public definitions

// reserved tags
property bool			_server_only$			= true;
property string			_doc$					= "Checks quest state upon receiving we_req_activate";

// exported properties
property string			quest_name$						doc = "Name of the quest";
property int			quest_state$			= -1			doc = "State of the quest, -1 to simply check if it's active";
property scid      		send_to_scid$						doc = "Scid of object to receive message";
property eWorldEvent		message_if_true$		= WE_REQ_ACTIVATE	doc = "Message to send if true";
property eWorldEvent		message_if_false$		= WE_REQ_DEACTIVATE 	doc = "Message to send if false";
property float			num_delay$			= 0			doc = "Number of seconds to delay sending the message";

property bool			check_complete$			= false			doc = "Set this to true to just test if the quest is complete";
property bool			check_state_greater_than$	= false			doc = "Set this true if you want to check if quest state is greater than quest_state variable";

owner = GoSkritComponent;

//////////////////////////////////////////////////////////////////////////////

trigger OnGoDrawDebugHud$
{
	Goid goid$ = send_to_scid$.Goid;
	if( goid$.IsValid )
	{
		World.DrawDebugDirectedLine( owner.go.Placement.Position,
									 goid$.go.Placement.Position,
									 MakeColor( 0.5, 1.0, 0, 0.5 ),
									 ToString( message_if_true$ ) );
	}
}

event OnGoHandleMessage$( eWorldEvent e$, WorldMessage msg$)
{
	if( e$ == WE_REQ_ACTIVATE )
	{
		// TAT 6/6/2003 - The new journal system needs all these Victory calls to take
		//		who is asking, so pass through the message sender
		Goid player$;

		// are we using the new journals
		if (WorldMap.GetUsingPlayerJournal)
		{
			// yes, so look player up from the message
			player$ = MakeGoid( msg$.GetData1() );

			if (!player$.IsValid())
			{
				report.errorf("Trying to check a quest state without passing in catalyst when using new journals!  Scid = 0x%x\n", owner.Scid );
			}
		}
		else
		{
			player$ = Server.ScreenHero.Goid;
		}


		if ( StringTool.IsEmpty( quest_name$ ) )
		{
			report.errorf("Trying to check a quest state without specifying a quest name!  Scid = 0x%x\n", owner.Scid );
		}
		else if ( send_to_scid$ == 0 )
		{
			report.errorf("send_to_scid is undefined in check_quest trigger (Scid = 0x%x)\n", owner.Scid );
		}
		// TAT 6/6/03 - are we checking if it's complete?
		else if ( check_complete$ )
		{
			if ( Victory.IsQuestCompleted( quest_name$, player$ ) )
			{
				PostWorldMessage( message_if_true$, owner.Goid, send_to_scid$, num_delay$ );
			}
			else
			{
				PostWorldMessage( message_if_false$, owner.Goid, send_to_scid$, num_delay$ );
			}
		}
		else if ( quest_state$ == -1 ) // just checking to see if the quest is currently active
		{
			if ( Victory.IsQuestActive( quest_name$, player$ ))
			{
				PostWorldMessage( message_if_true$, owner.Goid, send_to_scid$, num_delay$ );
			}
			else
			{
				PostWorldMessage( message_if_false$, owner.Goid, send_to_scid$, num_delay$ );
			}
		}
		// JCD 7/14/03
		// check to see if quest state is greater than quest_state variable
		else if( check_state_greater_than$ )
		{
			if ( Victory.GetQuestOrder( quest_name$, player$ ) > quest_state$ )
			{
				PostWorldMessage( message_if_true$, owner.Goid, send_to_scid$, num_delay$ );
			}
			else
			{
				PostWorldMessage( message_if_false$, owner.Goid, send_to_scid$, num_delay$ );
			}
		}
		else // checking to see if the quest is on a specific state
		{
			if ( Victory.GetQuestOrder( quest_name$, player$ ) == quest_state$ )
			{
				PostWorldMessage( message_if_true$, owner.Goid, send_to_scid$, num_delay$ );
			}
			else
			{
				PostWorldMessage( message_if_false$, owner.Goid, send_to_scid$, num_delay$ );
			}
		}
	}
}
