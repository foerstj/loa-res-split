//////////////////////////////////////////////////////////////////////////////
//
// File     :  sound_emitter.skrit
// Author(s):  Chad Queen, Eric Tams
//
// Copyright © 2001 Gas Powered Games, Inc.  All rights reserved.
//----------------------------------------------------------------------------
//  $Revision:: $              $Date:$
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////

property string _doc$                	= "A basic 3D sound emitter";
property string _required_component$	= "placement";
property bool	_server_only$		= false;

property bool	start_on_creation$	= true		doc = "Start Emitter when it enters the world";
property bool	repeat$			= true		doc = "Will continually keep playing based on repeat rate";
property float	repeat_rate$		= 2.0		doc = "Number of seconds before starting to play sound again";
property float	max_repeat_rate$	= -1.0		doc = "Maximum Number of seconds before starting to play sound again (use to make a range), if -1 will just use repeat rate.";
property string event_sound$				doc = "Name of voice event sound to play";
property float  min_dist$		= 6.0		doc = "Minimum sound distance";
property float  max_dist$		= 35.0		doc = "Maximum sound distance";
property int 	start_hour$		= 0		doc = "Starting hour 0 - 23 inclusive";
property int  	stop_hour$		= 23		doc = "Stoppin hour 0 - 23 inclusive, Note: stop time can be sooner then start, and it will do what you want.";
property bool	continual_loop$		= false		doc = "Continually loop ( ignore repeat variables )";
property bool	stop_instantly$		= false		doc = "Stop sound instantly on De-Activation, instead of waiting for the end of the sample. !!! required to stop looping sounds !!!";
property int	time_chunk$		= -1		doc = "1 = night(1-4), 2 = sun-rise(5-11), 3 = day(12-19), 4 = sunset(20-0), set to override start/stop hour.";
property bool   is_global$		= false		doc = "global sound instead of positional.";	// JCD 8/28/03

owner = GoSkritComponent;

int last_sound$ = -1;

event OnGoDrawDebugHud$
{
	string temp_sound$ = "";
	string temp_loop$ = "";
	string continuous$ = "";
	if (!StringTool.IsEmpty( event_sound$ ) )
	{
		temp_sound$ = event_sound$;
	}
	if(repeat$)
	{
		temp_loop$ = "Looping";
	} else {
		temp_loop$ = "Playing once";
	} 
	
	if(continual_loop$)
	{
		continuous$ = "Continuous play";
	} else {
		continuous$ = "Non-continuous play";
	} 
	
	World.DrawDebugSphere( owner.Go.Placement.Position,
						   min_dist$,
						   MakeColor( 0.0, 1.0, 0.0 ),
						   Debug.Format( "Sound: %s\nMin Distance: %g\nStart time: %d Stop time: %d Current time: %d\nMin rep time: %g Max rep time: %g\nSound is: %s\nPlay mode: %s\n",
										 temp_sound$, min_dist$,start_hour$,stop_hour$,TimeOfDay.Hour,repeat_rate$,max_repeat_rate$,temp_loop$,continuous$ ) );
	
	World.DrawDebugSphere( owner.Go.Placement.Position,
						   max_dist$,
						   MakeColor( 0.0, 1.0, 1.0 ),
						   Debug.Format( "Max Distance %g\n",
										 max_dist$  ) );

}

bool goodtime$
{
	int time$ = TimeOfDay.Hour;
	if( ( ( start_hour$ <= stop_hour$ ) && ( start_hour$ <= time$ ) && ( stop_hour$ >= time$ ) ) ||
		( ( start_hour$ > stop_hour$ ) && ( ( start_hour$ <= time$ ) || ( stop_hour$ >= time$ ) ) ) )
	{
		return true;
	}
	return false;
}

void playsound$
{
	if( goodtime$ )
	{
		// JCD 8/28/03
		// global sound?
		if( is_global$ )
		{
			// call global PlayVoiceSound.
			last_sound$ = owner.Go.PlayVoiceSound(event_sound$, false);
		}
		else
		{
			last_sound$ = owner.Go.PlayVoiceSound( event_sound$, min_dist$, max_dist$, continual_loop$ );
		}
	}
}

startup state StartUp$
{
	event OnEnterState$
	{
		if ( StringTool.IsEmpty( event_sound$ ) )
		{
			Report.ErrorF( "Sound emitter used in '%s' has no sound configured!", owner.Go.TemplateName );
		}
	}
}

trigger OnGoHandleMessage$( WE_SCIDBITS_CHANGED )
{
	SetState Setup$;
}

trigger OnGoHandleMessage$( WE_ENTERED_WORLD )
{
	if( time_chunk$ == 1)
	{
		start_hour$ = 1;
		stop_hour$ = 4;
	} else if( time_chunk$ == 2)
	{
		start_hour$ = 5;
		stop_hour$ = 11;
	} else if( time_chunk$ == 3)
	{
		start_hour$ = 12;
		stop_hour$ = 19;
	} else if( time_chunk$ == 4)
	{
		start_hour$ = 20;
		stop_hour$ = 0;
	}
	
	SetState Setup$;
}

event OnGoHandleMessage$( eWorldEvent e$, WorldMessage /*msg$*/ )
{
	if( e$ == WE_LEFT_WORLD )
	{
		if( last_sound$ != -1 )
		{
			owner.Go.StopSound( last_sound$ );
		}
	}
}

state Setup$
{
	event OnEnterState$
	{	
		if( !Godb.GetScidBit( owner.scid, 0 ) ) // nothing has changed. In the default state.
		{
			if( IsServerLocal )
			{
				if( start_on_creation$ )
				{
					int Bits$ = Godb.GetScidBits( owner.scid );
//					report.genericf("Bits: %d\n", bits$ );					
					Bits$ |= 1;
					Bits$ |= 2;					
					Godb.SSetScidBits( owner.scid, Bits$ );
					playsound$;
					SetState Running$;
					return;
				}
				else
				{
					// Set the used Bits
					Godb.SSetScidBit( owner.scid, 0, true );
				}
			}
		}
		else if ( Godb.GetScidBit( owner.scid, 1 ) ) // emitter was active when it streamed out turn it back on.
		{
			playsound$;
			SetState Running$;
			return;
		}
		else
		{
			if( !stop_instantly$ && !continual_loop$ )
			{
				last_sound$ = -1;
			}
			
			if( last_sound$ != -1 )
			{
				owner.Go.StopSound( last_sound$ );
			}
		}
		
		SetState Idle$;
	}
}


state Idle$
{
	trigger OnGoHandleMessage$( WE_REQ_ACTIVATE )
	{
		if( IsServerLocal )
		{
			Godb.SSetScidBit( owner.scid, 1, true );
		}
	}
}

trigger OnGoHandleMessage$( WE_REQ_DEACTIVATE )
{				
	if( IsServerLocal )
	{
		// Set the active Bits
		Godb.SSetScidBit( owner.scid, 1, false );
	}
}		

state Running$
{
	event OnEnterState$
	{		
		if ( continual_loop$ )
		{
			// if we are a continuous sound check if we succeed in playing, if not try again in 5 frames.
			if( last_sound$ == -1 )
			{
				this.CreateFrameTimer( 2, 5 );
				this.SetTimerRepeatCount( 2, -1 );
			}
		}		
		else
		{
			if( repeat$ )
			{
				// set timer for when we want to repeat.
				this.CreateTimer( 1, ( max_repeat_rate$ > 0.0 ) ? Math.RandomFloat( repeat_rate$, max_repeat_rate$ ) : repeat_rate$ );
			}
			else
			{
				GoDb.SetScidBit( owner.scid, 1, false );
			}
		}
	}

	trigger OnTimer$( 1 )
	{	
		playsound$;
		
		// set timer for when we want to repeat.
		this.CreateTimer( 1, ( max_repeat_rate$ > 0.0 ) ? Math.RandomFloat( repeat_rate$, max_repeat_rate$ ) : repeat_rate$ );
	}

	trigger OnTimer$( 2 )
	{
		playsound$;
		
		if( last_sound$ != -1 )
		{
			// Destroy timer
			this.DestroyTimer( 2 );
		}
	}
}
