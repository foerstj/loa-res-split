//////////////////////////////////////////////////////////////////////////////
//
// File     :  spell_purity.skrit
// Author(s):  Tara Teich
//
// Copyright © 2003 Mad Doc Software, LLC.  All rights reserved.
//----------------------------------------------------------------------------
//  $Revision:: $              $Date:$
//----------------------------------------------------------------------------
//
// Turns undead, and heals friends
//
//////////////////////////////////////////////////////////////////////////////

property string effect_script$	= ""		doc = "Name of the SiegeFx script that will be providing the visual.";
property string caster_script$	= ""		doc = "Name of the SiegeFx script providing the visual on the caster.";
property string heal_script$	= ""		doc = "Name of SiegeFx script to play on healing party members.";
property string script_params$	= ""   		doc = "Parameters to send to SiegeFx script";
property float	radius$			= 15.0		doc = "Radius of the effect, centered on the caster.";
property string grouping$		= "undead"	doc = "The type of creature we turn.";
property string description$	= ""		doc = "Description of enchantment being applied";
property string turnStateName$= "Turned"	doc = "State name for turned monsters.";
property string state_description$= "Cowering"	doc = "State name for turned monsters.";


owner = GoSkritComponent;

Goid target$;
Goid caster$;
float	alt_time$ = 0;   
SFxSID effectID$;

// Func to do the turning part of the spell
void TurnEnemies$()
{
	caster$.Go.Mind.TempGopColl1.Clear;
	caster$.Go.Mind.GetEnemiesInSphere( radius$, caster$.Go.Mind.TempGopColl1 );
	
	int i$ = 0;
	int iend$ = caster$.Go.Mind.TempGopColl1.Size();
	Go temp$;

	while( i$ < iend$ )
	{
		temp$ = caster$.Go.Mind.TempGopColl1.Get( i$ );

		if (temp$.hasmind())
		{
			bool doit$ = false;
			
			if( !StringTool.IsEmpty( grouping$ ) )
			{
				// if this is a member of the target group
				if ( Rules.IsMemberofGroup( temp$.goid, grouping$) )
				{
					doit$ = true;
				}
			}
			
			Job action$ = temp$.Mind.GetFrontJob( JQ_ACTION );
			if( action$ != NULL )
			{
				if( action$.JobAbstractType == JAT_STARTUP )
				{
					doit$ = false;
				}
			}
			
			if( temp$.Player.Controller != PC_COMPUTER  )
			{
				doit$ = false;
			}
			
			if( doit$ )
			{
				// if they know how to flee, we'll make them flee - but we have to do this later
				//		because setting the job now will clear the collection I'm looping through
				if( temp$.Mind.UnderstandsJob( JAT_FLEE_FROM_OBJECT ) )
				{
					// create Omni version of the spell - this is so have that timer for each effected guy
					GoCloneReq cloneReq$ = MakeGoCloneReq( Owner.go.Parent.Goid, owner.goid );
					cloneReq$.Omni = true;
					Goid new_spell$ = GoDb.SCloneGo( cloneReq$ );
					
					// send Omni version an Activate to get it started.
					PostWorldMessage( WE_REQ_ACTIVATE, caster$, new_spell$, MakeInt(temp$.Goid), 0 );
				}
			}
		}

		i$ += 1;
	}

}

// And to create the healing part
void HealFriends$()
{
	// We now need to heal all friendlies
	caster$.Go.Mind.TempGopColl1.Clear;
	
	caster$.Go.Mind.GetVisible( QT_FRIEND, caster$.Go.Mind.TempGopColl1, radius$ );
	
	caster$.Go.Mind.TempGopColl1.Add( caster$.Go );
	
	int i$ = 0;
	int iend$ = caster$.Go.Mind.TempGopColl1.Size();
	Go temp$;
	
	int enchanted$ = 0;
	while(i$ < iend$)
	{
		temp$ = caster$.Go.Mind.TempGopColl1.Get( i$ );
		
		if( temp$.HasActor() )
		{
			if( owner.Go.Magic.IsCastableOn( temp$, false) )
			{
				// create Omni version of the spell.
				GoCloneReq cloneReq$ = MakeGoCloneReq( Owner.go.Parent.Goid, owner.goid );
				cloneReq$.Omni = true;
				Goid new_spell$ = GoDb.SCloneGo( cloneReq$ );
				
				// send Omni version an Activate to get it started.
				PostWorldMessage( WE_REQ_ACTIVATE, caster$, new_spell$, MakeInt(temp$.Goid), 0 );
				enchanted$ += 1;
			}
		}
		i$ += 1;
	}
}


////////////////////////////////////////
//	State Machine
			
startup state CastBegin$
{
 	event OnGoHandleMessage$( eWorldEvent e$, WorldMessage msg$ )
	{
		if( e$ == WE_REQ_CAST ) {
			target$ = MakeGoid( msg$.GetData1() );
			caster$ = msg$.GetSendFrom();
			
			if( !target$.IsValidMp || !caster$.IsValidMp )
			{
				SetState Finished$;
				return;
			}
				
			// Start the visual
			if ( !StringTool.IsEmpty(caster_script$) )
			{
				SiegeFx.SRunScript( caster_script$, target$, caster$, script_params$, owner.Goid, e$ );
			}			

			// Turn enemies
			TurnEnemies$();

			// heal
			HealFriends$();

			alt_time$ = 20;
			SetState InActive$;
			return;	

			//SetState Finished$;
			//return;
		} else if ( e$ == WE_REQ_ACTIVATE ) {
			
			/////////////////////////////
			// Omni Go
			
			target$ = MakeGoid( msg$.GetData1() );
			caster$ = msg$.GetSendFrom();

			if( !target$.IsValid || !caster$.Isvalid )
			{
				SetState RestoreState$;
				return;
			}

			// we do 2 different things, if friend or enemy
			if (target$.Go.Mind.IsFriend(caster$.go))
			{
				// Check to see if the enchantment has already been cast on this go
				if( target$.Go.Actor.HasGenericState( owner.Go.Magic.StateName ) )
				{
					float level$ = target$.Go.Actor.GetGenericStateSpellLevel( owner.Go.Magic.StateName );
					Goid old_spell$ = target$.Go.Actor.GetGenericStateSpellGoid ( owner.Go.Magic.StateName );
					
					if( level$ > owner.go.magic.GetMagicLevel( caster$.go ) )
					{
						owner.go.magic.SApplyEnchantments( target$, caster$ );
						alt_time$ = GoDb.GetLongestAlteration( target$, target$, caster$, owner.goid );

						int packed_speed$ = Math.Round( alt_time$ * 1000 );
						SendWorldMessage( WE_SPELL_EXPIRATION_TIMER_RESET, owner.Goid, old_spell$ ,packed_speed$);
					
						SetState InActive$;
						return;

					} else {
			
						// tell the old spell to go away.
 						SendWorldMessage( WE_SPELL_EXPIRATION_TIMER_RESET, owner.Goid, old_spell$, -1);
						
						// remove stale state...
						target$.Go.Actor.SRemoveGenericState( owner.Go.Magic.StateName );
					}
				}
				
				// do the alterations and figure out how long we should stick around because of them.
				owner.go.magic.SApplyEnchantments( target$, caster$ );

				alt_time$ = GoDb.GetLongestAlteration( target$, target$, caster$, owner.goid );

				// Add the effected state so this can only happen once
				target$.Go.Actor.SAddGenericState( owner.Go.Magic.StateName, description$, alt_time$, caster$, owner.goid, owner.go.magic.GetMagicLevel( caster$.go ) );
				
				// Start the visual
				if( heal_script$ != "" )
				{
					effectID$ = SiegeFx.SRunMpScript( heal_script$, target$, caster$, "", owner.Goid, e$ );
				}
				
				Godb.StartWatching( owner.goid, target$);
				
				
				this.CreateTimer( 1, alt_time$ );
			}
			else
			{
				// it's an enemy, so we want to just wait for the duration, then set it able to attack again
				alt_time$ = owner.Go.Magic.EvaluateEffectDuration(caster$.Go, target$.Go);

				// Add the effected state so this can only happen once
				target$.Go.Actor.SAddGenericState( turnStateName$, state_description$, alt_time$, caster$, owner.goid, owner.go.magic.GetMagicLevel( caster$.go ) );

				// now we run from the caster - we know we understand the job, or we wouldn't have gotten here at all
				target$.Go.Mind.SDoJob( MakeJobReq( JAT_FLEE_FROM_OBJECT, JQ_ACTION, QP_CLEAR, AO_COMMAND, caster$ ) );

				// set that this guy can't attack - after the duration is up, we'll enable
				//		him to attack again
				target$.Go.Mind.SetMayAttack = false;
				
				// Start the visual
				if( effect_script$ != "" )
				{
					effectID$ = SiegeFx.SRunMpScript( effect_script$, target$, caster$, "", owner.Goid, e$ );
				}
				
				Godb.StartWatching( owner.goid, target$ );				
				
				this.CreateTimer( 1, alt_time$ );
			}
		}
		else if ( e$ == WE_SPELL_EXPIRATION_TIMER_RESET )
		{
			/////////////////////////////
			// Omni Go
			
			if(target$.IsValid)
			{
				if( msg$.GetData1() == -1)
				{
					SetState( Finished$ );
				} else {
					// remove stale state...
					target$.Go.Actor.SRemoveGenericState( owner.Go.Magic.StateName );
					
					float unpacked_duration$ = msg$.GetData1() / 1000.0;
					
					// Add the effected state so this can only happen once
					target$.Go.Actor.SAddGenericState( owner.Go.Magic.StateName, description$, unpacked_duration$, caster$, owner.goid, owner.go.magic.GetMagicLevel( caster$.go ) );
				
					This.SetNewTimerSeconds( 1, unpacked_duration$ );
				}
			}
		}
		
	}

	transition -> RestoreState$ :  OnTimer( 1 );
	transition -> RestoreState$ :  OnGoHandleCCMessage( WE_KILLED );
		
}

state RestoreState$
{
	/////////////////////////////
	// Omni Go
	
	//transition -> Finished$ :  OnTimer( 1 );
	
	event OnEnterState$
	{
		// If the go is still alive then restore his state
		if( target$.IsValid )
		{
			Godb.StopWatching( owner.goid, target$);

			// again, different if it's a friend or an enemy
			if (target$.Go.Mind.IsFriend(caster$.go))
			{			
				// remove the state so this can be affected again
				target$.Go.Actor.SRemoveGenericState( owner.Go.Magic.StateName );
			}
			else
			{			
				// stop visual effect
				SiegeFx.SStopScript(effectID$);
				
				// remove the state so this can be affected again
				target$.Go.Actor.SRemoveGenericState( turnStateName$ );
				// and set it to be able to attack again
				target$.Go.Mind.SetMayAttack = true;
			}
		}
		
		//this.CreateTimer( 1, effect_delay$ );
		SetState Finished$;
	}
}

state InActive$
{
	/////////////////////////////
	// Omni Go
	
	trigger OnTimer$(1)
	{
		SetState( Finished$ );
	}
	
	event OnEnterState$
	{
		this.CreateTimer( 1, alt_time$ );
	}
}



state Finished$
{	
	trigger OnGoHandleMessage$( WE_SPELL_SYNC_END )
	{		
		SiegeFx.ClearVariables( owner.goid );
	
		PostWorldMessage( WE_REQ_DELETE, owner.Goid, owner.Goid, 1 );
	}
}
