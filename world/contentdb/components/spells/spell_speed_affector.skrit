//////////////////////////////////////////////////////////////////////////////
//
// File     :  spell_status_effect.skrit
// Author(s):  Eric Tams
//
// Copyright © 2000 Gas Powered Games, Inc.  All rights reserved.
//----------------------------------------------------------------------------
//  $Revision:: $              $Date:$
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////

// This skrit waits reads the duration and sets up a state timer so only one of these spells
// can be cast at a time. The when the duration is over the state is removed and the spell
// is deleted.


property string effect_script$		= ""	doc = "Name of the SiegeFx script that will be providing the visual.";
property string effect_params$		= ""   	doc = "Parameters to send to SiegeFx script";
property string description$		= ""	doc = "Description of enchantment being applied";
property string immunity$		= ""	doc = "If the target contains this membership then it is immune to this spell.";
property float  walkModifier$		= 1.0	doc = "Used to slow or speed up the targets walking speed.";
property float  attackModifier$		= 1.0	doc = "Used to slow or speed up the targets attacking speed.";
property bool	groupEffect$		= false doc = "Does this get applied on a single character or multiple characters?";
property float	radius$			= 0.0	doc = "The distance to search from the caster for characters to affect.";
property bool   canStackDuration$   	= false doc = "Can this spell be cast multiple times to increase duration?";
property bool	effectPartyMembers$ 	= false doc = "buff spells should set this to true";

owner = GoSkritComponent;

Goid 	caster$;
float	previousVelocity$;
float	duration$;
Goid	target$;

startup state CastBegin$
{
 	event OnGoHandleMessage$( eWorldEvent e$, WorldMessage msg$ )
	{
		if( e$ == WE_REQ_CAST )
		{
		
			/////////////////////////////
			// Normal Go
			
			caster$ = msg$.GetSendFrom();
			target$ = MakeGoid( msg$.GetData1() );

			if( groupEffect$ && target$.Go.Hasmind )
			{
				// we need to find all characters near the target					
				target$.Go.Mind.TempGopColl1.Clear;
					
				target$.Go.Mind.TempQtColl1.Clear;
				target$.Go.Mind.TempQtColl1.Add( QT_ACTOR );
				target$.Go.Mind.TempQtColl1.Add( QT_ALIVE_CONSCIOUS );
				target$.Go.Mind.TempQtColl1.Add( QT_FRIEND );
				
				if( effectPartyMembers$ )
				{
					target$.Go.Mind.TempQtColl1.Add( QT_GOOD );
				}
				
				// grab all visible actors that fit the above requirements
				target$.Go.Mind.GetVisible( target$.Go.Mind.TempQtColl1, target$.Go.Mind.TempGopColl1, radius$ );
										
				int i$ = 0;
				int iend$ = target$.Go.Mind.TempGopColl1.Size();
					
				int enchanted$ = 0;
				Go temp$;
				bool canCastUpon$;

				// now loop through the characters
				while(i$ < iend$)
				{
					// start off at true
					canCastUpon$ = true;
					
					temp$ = target$.Go.Mind.TempGopColl1.Get( i$ );
					
					report.generic("checking if we can cast on this creature\n");
					
					// Can we cast on this thing 
					if( owner.Go.Magic.IsCastableOn( temp$, true) )
					{
						if( effectPartyMembers$ && !temp$.IsAnyHumanPartyMember() )
						{
							canCastUpon$ = false;
						}
						
						// check if the character is immune to this
						if( !StringTool.IsEmpty( immunity$ ) )
						{
							if( temp$.Common.Membership.Contains( immunity$ ) )
							{
								canCastUpon$ = false;
							}
						}

						if (canCastUpon$)
						{
							// If we can increase the duration of this spell, and if the target
							// already has the state for this spell, then we send a message to
							// the existing spell to extend it.
							if(canStackDuration$
							   && temp$.Actor.HasGenericState(owner.go.Magic.StateName))
							{
								report.generic("State exists.  Need to extend spell on friend.\n");

								Goid existingSpell$ = temp$.Actor.GetGenericStateSpellGoid(owner.go.Magic.StateName);

								// Pack the duration from this spell
								int packedDuration$ = Math.Round(owner.Go.Magic.EvaluateEffectDuration(caster$.Go, temp$) * 1000);

								// Send the world message to the existing spell with the time it needs to extend itself.
								PostWorldMessage( WE_SPELL_SYNC_MID, owner.goid, existingSpell$, packedDuration$, 0 );
							}
							// Otherwise, create the copy of this spell to watch this particular
							// target.
							else
							{
								report.generic("casting spell for the first time\n");
								// create Omni version of the spell.
								GoCloneReq cloneReq$ = MakeGoCloneReq( Owner.go.Parent.Goid, owner.goid );
								cloneReq$.Omni = true;
								Goid new_spell$ = GoDb.SCloneGo( cloneReq$ );

								// send Omni version an Activate to get it started.
								PostWorldMessage( WE_REQ_ACTIVATE, target$, new_spell$, MakeInt(temp$.Goid), 0 );
								enchanted$ += 1;
							}
						}
					}
			        i$ += 1;
			    }
			}


			if( !owner.Go.Magic.IsCastableOn( target$.Go, false ) )
			{
				//report.generic("returning (1)\n");
				SetState Finished$;
				return;	
			}

			if( !target$.IsValid || !caster$.IsValid )
			{
				//report.generic("returning (2)\n");
				SetState Finished$;
				return;
			}
				 
			if( !StringTool.IsEmpty( immunity$ ) )
			{
				//report.generic("returning (3)\n");
				if( target$.Go.Common.Membership.Contains( immunity$ ) )
				{
					SetState Finished$;
					return;
				}
			}

			// If we can increase the duration of this spell, and if the target
			// already has the state for this spell, then we send a message to
			// the existing spell to extend it.
			if(canStackDuration$
			   && target$.Go.Actor.HasGenericState(owner.go.Magic.StateName))
			{
				Goid existingSpell$ = target$.Go.Actor.GetGenericStateSpellGoid(owner.go.Magic.StateName);

				// Pack the duration from this spell
				int packedDuration$ = Math.Round(owner.Go.Magic.EvaluateEffectDuration(caster$.Go, target$.Go) * 1000);

				// Send the world message to the existing spell with the time it needs to extend itself.
				PostWorldMessage( WE_SPELL_SYNC_MID, owner.goid, existingSpell$, packedDuration$, 0 );

				SetState Finished$;
				return;
			}		
				
			if( Owner.go.Parent != NULL )
			{
				// Create an Omni version of the spell.
				GoCloneReq cloneReq$ = MakeGoCloneReq( Owner.go.Parent.Goid, owner.goid );
				cloneReq$.Omni = true;
				Goid new_spell$ = GoDb.SCloneGo( cloneReq$ );
				
				// Send a message to the omni version of the Spell to get it started.
				PostWorldMessage( WE_REQ_ACTIVATE, target$, new_spell$, MakeInt(target$), 0 );
			}

			// Delete Normal version of the spell.
			SetState Finished$;
			return;
			
		}
		else if ( e$ == WE_REQ_ACTIVATE )
		{
			
			/////////////////////////////
			// Omni Go

			target$ = MakeGoid( msg$.GetData1() );
			caster$ = msg$.GetSendFrom();

			if( !target$.IsValid || !caster$.Isvalid )
			{
				SetState RestoreState$;
				return;
			}
			
			// Check to see if the enchantment has already been cast on this go
			if( target$.Go.Actor.HasGenericState( owner.Go.Magic.StateName ) )
			{
				SetState Finished$;
				return;
			}

			// calculate our duration
			duration$ = owner.Go.Magic.EvaluateEffectDuration(caster$.Go, target$.Go);

			
			#only( game )
			[[
			// apply the speed effects
			previousVelocity$ = target$.Go.Body.GetAvgMoveVelocity();
			target$.Go.Body.SetAvgMoveVelocity(previousVelocity$*walkModifier$);

			// modify melee/range attacks and cast speeds
			target$.Go.Aspect.AspectHandle.Blender.ChangeSpeedModifier(attackModifier$);
			]]

			// keep track of what our target is doing
			GoDb.StartWatching( owner.Goid, target$);

			// Reset target AI so spell immediately takes effect
			target$.Go.Mind.SDoJob( MakeJobReq( JAT_STOP, JQ_ACTION, QP_CLEAR, AO_REFLEX ));
			target$.Go.Mind.ResetSensors();

			// Add the effected state so this can only happen once
			target$.Go.Actor.SAddGenericState( owner.Go.Magic.StateName, description$, duration$, caster$, owner.goid, owner.go.magic.GetMagicLevel( caster$.go ) );
			
			// Start the visual
			if( effect_script$ != "" )
			{
				SiegeFx.SRunMpScript( effect_script$, target$, caster$, effect_params$, owner.Goid, e$ );
			}
			
			this.CreateTimer( 1, duration$);
		
		}
		//When the orbiter effect has started, it will send a sync message back.
		//This is important because it gives the ID of the orbiter.
		else if(e$ == WE_SPELL_SYNC_MID)
		{
			// Extract the time to extend the orbiter duration.
			float durationExtension$ = msg$.GetData1() / 1000;

			float remainingTime$ = this.AddTimerSeconds(1, durationExtension$);

			// Remove the exisiting generic state.
			target$.Go.Actor.SRemoveGenericState( owner.Go.Magic.StateName );	

			// Add another one with the remaining time and the duration extension.
			target$.Go.Actor.SAddGenericState( owner.Go.Magic.StateName, description$, remainingTime$, caster$, owner.goid, owner.go.magic.GetMagicLevel( caster$.go ) );

		}
	}

	transition -> RestoreState$: OnTimer( 1 );
	transition -> RestoreState$: OnGoHandleCCMessage( WE_KILLED );
	transition -> RestoreState$: OnGoHandleCCMessage( WE_LOST_CONSCIOUSNESS );

	// MRC 9/18/2003 We need to watch for when this object enters the world.  If it leaves all frustums
	// and then re-enters the world, we need to re-apply the effect on the creature.
	event OnGoHandleCCMessage$( eWorldEvent e$, WorldMessage /*msg$*/ )
	{
		if( e$ == WE_ENTERED_WORLD )
		{
			if( effect_script$ != "" )
			{
				SiegeFx.SRunMpScript( effect_script$, target$, caster$, effect_params$, owner.Goid, e$ );
			}
		}
	}
}

state RestoreState$
{
	/////////////////////////////
	// Omni Go
	
	event OnEnterState$
	{
		// If the go is still alive then restore his state
		if( target$.IsValid ) {
			
			// no need to watch target any longer
			GoDb.StopWatching( owner.Goid, target$);
			
			// remove the state so this can be affected again
			target$.Go.Actor.SRemoveGenericState( owner.Go.Magic.StateName );

			#only( game )
			[[
			// un apply the slow down effects
			target$.Go.Body.SetAvgMoveVelocity(previousVelocity$);

			// return melee/range attacks and cast speeds to normal
			target$.Go.Aspect.AspectHandle.Blender.ChangeSpeedModifier(1.0);
			]]
			
			// Reset target AI so spell immediately takes effect
			target$.Go.Mind.SDoJob( MakeJobReq( JAT_STOP, JQ_ACTION, QP_CLEAR, AO_REFLEX ));
			target$.Go.Mind.ResetSensors();

		}
		
		SetState( StopEffect$ );
	}
}

state InActive$
{
	/////////////////////////////
	// Omni Go
	
	trigger OnTimer$(1)
	{
		SetState( StopEffect$ );
	}
	
	event OnEnterState$
	{
		this.CreateTimer( 1, 10 );
	}
}

state StopEffect$
{
	/////////////////////////////
	// Omni Go
	
	event OnEnterState$
	{
		if( target$.IsValid ) {
			SiegeFx.SStopScript( target$, effect_script$ );
		}
		
		SetState Finished$;
	}
}

state Finished$
{
	event OnEnterState$
	{
		// Delete this skrit
		PostWorldMessage( WE_REQ_DELETE, owner.Goid, owner.Goid, 1 );
	}
}