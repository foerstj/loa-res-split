//////////////////////////////////////////////////////////////////////////////
//
// File     :  spell_transference.skrit
// Author(s):  Jason Dunlop
//
// Copyright © 2000 Gas Powered Games, Inc.  All rights reserved.
//----------------------------------------------------------------------------
//  $Revision:: $              $Date:$
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////

property string effect_script$		= ""	doc = "Name of the SiegeFx script that will be providing the visual.";
property string effect_params$		= ""   	doc = "Parameters to send to SiegeFx script";
property string description$		= ""	doc = "Description of enchantment being applied";
property string caster_description$	= ""	doc = "Description of enchantment being applied to the caster";
property string immunity$					doc = "If the target contains this membership then it is immune to this spell.";

owner = GoSkritComponent;

Goid 	target$;
Goid 	caster$;
float	duration$;

startup state CastBegin$
{
 	event OnGoHandleMessage$( eWorldEvent e$, WorldMessage msg$ )
	{
		if( e$ == WE_REQ_CAST ) {
		
			/////////////////////////////
			// Normal Go
			
			caster$ = msg$.GetSendFrom();
			target$ = MakeGoid( msg$.GetData1() );
			
			if( !target$.IsValid || !caster$.IsValid )
			{
				SetState Finished$;
				return;
			}
			 
			if( !StringTool.IsEmpty( immunity$ ) )
			{
				if( target$.Go.Common.Membership.Contains( immunity$ ) )
				{
					SetState Finished$;
					return;
				}
			}
			
			if( Owner.go.Parent != NULL )
			{
				// Create an Omni version of the spell.
				GoCloneReq cloneReq$ = MakeGoCloneReq( Owner.go.Parent.Goid, owner.goid );
				cloneReq$.Omni = true;
				Goid new_spell$ = GoDb.SCloneGo( cloneReq$ );
				
				// Send a message to the omni version of the Spell to get it started.
				PostWorldMessage( WE_REQ_ACTIVATE, caster$, new_spell$, msg$.GetData1(), 0 );
			}
			
			// Delete Normal version of the spell.
			SetState Finished$;
			
		} else if ( e$ == WE_REQ_ACTIVATE ) {
			
			/////////////////////////////
			// Omni Go
			
			target$ = MakeGoid( msg$.GetData1() );
			caster$ = msg$.GetSendFrom();

			if( !target$.IsValid || !caster$.Isvalid )
			{
				SetState RestoreState$;
				return;
			}
			
			// Check to see if the enchantment has already been cast on this go
			if( target$.Go.Actor.HasGenericState( owner.Go.Magic.StateName ) )
			{
				SetState RestoreState$;
				return;
			}

			duration$ = owner.Go.Magic.EvaluateEffectDuration(caster$.Go, target$.Go);

			#only( game )
          	[[
			// Setup where damage dealt to caster will go to target
			caster$.Go.aspect.SetDamageTaker( target$ );
			]]

			// Add the effected state so this can only happen once
			target$.Go.Actor.SAddGenericState( owner.Go.Magic.StateName, description$, duration$, caster$, owner.goid, owner.go.magic.GetMagicLevel( caster$.go ) );
			caster$.Go.Actor.SAddGenericState( owner.Go.Magic.CasterStateName, caster_description$, duration$, caster$, owner.goid, owner.go.magic.GetMagicLevel( caster$.go ) );

			// Start the visual
			if( effect_script$ != "" )
			{
				SiegeFx.SRunMpScript( effect_script$, target$, caster$, effect_params$, owner.Goid, e$ );
			}

			GoDb.StartWatching( owner.Goid, target$);
			
			this.CreateTimer( 1, duration$);
		
		} else if ( e$ == WE_SPELL_EXPIRATION_TIMER_RESET )
		{
			/////////////////////////////
			// Omni Go
			
			if(target$.IsValid)
			{
				if( msg$.GetData1() == -1)
				{
					SetState RestoreState$;
				} else {
					// remove stale state...
					target$.Go.Actor.SRemoveGenericState( owner.Go.Magic.StateName );
					
					float unpacked_duration$ = msg$.GetData1() / 1000.0;
					
					// Add the effected state so this can only happen once
					target$.Go.Actor.SAddGenericState( owner.Go.Magic.StateName, description$, unpacked_duration$, caster$, owner.goid, owner.go.magic.GetMagicLevel( caster$.go ) );
				
					This.SetNewTimerSeconds( 1, unpacked_duration$ );
				}
			}
		}
		
	}
	transition -> RestoreState$: OnTimer( 1 );
	transition -> RestoreState$: OnGoHandleCCMessage( WE_KILLED );
}

state RestoreState$
{
	/////////////////////////////
	// Omni Go
	
	event OnEnterState$
	{
		// If the go is still alive then restore his state
		if( target$.IsValid ) {
			GoDb.StopWatching( owner.Goid, target$);
			
			// remove the state so this can be affected again
			target$.Go.Actor.SRemoveGenericState( owner.Go.Magic.StateName );

			// caster can recast this now
			caster$.Go.Actor.SRemoveGenericState( owner.Go.Magic.CasterStateName );

			#only( game )
          	[[
			// caster no longer has a damage taker
			caster$.Go.Aspect.ClearDamageTaker();
			]]

		}
		
		SetState( StopEffect$ );
	}
}

state StopEffect$
{
	/////////////////////////////
	// Omni Go
	
	event OnEnterState$
	{
		if( target$.IsValid ) {
			SiegeFx.SStopScript( owner.goid, effect_script$ );
		}
		
		SetState Finished$;
	}
}

state Finished$
{
	event OnEnterState$
	{
		// Delete this skrit
		PostWorldMessage( WE_REQ_DELETE, owner.Goid, owner.Goid, 1 );
	}
}