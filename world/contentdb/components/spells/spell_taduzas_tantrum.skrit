//////////////////////////////////////////////////////////////////////////////
//
// File     :  spell_taduzas_tantrum.skrit
// Author(s):  Jason Dunlop
//
// Copyright © 2003 Mad Doc Software, LLC.  All rights reserved.
//----------------------------------------------------------------------------
//  $Revision:: $              $Date:$
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////

// skrit freezes all enemies around the caster


property string effect_script$		= ""	doc = "Name of the SiegeFx script that will be providing the visual.";
property string explode_script$		= ""	doc = "Name of the SiegeFx script that will be providing the visual when the target explodes.";
property string effect_params$		= ""   	doc = "Parameters to send to SiegeFx script";
property string description$		= ""	doc = "Description of enchantment being applied";
property string immunity$			= ""	doc = "If the target contains this membership then it is immune to this spell.";
property float	freeze_threshold$	= 1.0	doc = "Monster health must have his health/maxhealth ration under this to be frozen 0.5 would be 50% of the monsters normal health.";
property float	freeze_chance$		= 1.0	doc = "Change to freeze the monster.";
property float	radius$				= 0.0	doc = "The distance to search from the target for characters to affect.";

owner = GoSkritComponent;
#include "k_inc_spl_utils" 

Goid 	caster$;
float	duration$;
Goid	target$;

// MRC 9/19/2003 It's OK to keep refreezing creatures so long as this is set to true.
// Once the time runs out, or the target is killed, then we shouldn't re-freeze anything.
bool m_refreezeOK$ = true;

startup state CastBegin$
{
 	event OnGoHandleMessage$( eWorldEvent e$, WorldMessage msg$ )
	{
		if( e$ == WE_REQ_CAST )
		{
		
			/////////////////////////////
			// Normal Go
			
			caster$ = msg$.GetSendFrom();
			target$ = MakeGoid( msg$.GetData1() );

			// TRJ 8/15/03 - changed to use the caster goid rather than the target
			if( target$.Go.Hasmind )
			{
				// TRJ 8/15/03 - changed to search for enemies
				// we need to find all characters near the caster					
				/*caster$.Go.Mind.TempGopColl1.Clear;

				caster$.Go.Mind.TempQtColl1.Clear;
				caster$.Go.Mind.TempQtColl1.Add( QT_ACTOR );
				caster$.Go.Mind.TempQtColl1.Add( QT_ALIVE_CONSCIOUS );
				caster$.Go.Mind.TempQtColl1.Add( QT_EVIL );

				caster$.Go.Mind.GetVisible( target$.Go.Mind.TempQtColl1, target$.Go.Mind.TempGopColl1, radius$ );*/

				// get the caster's gopcoll and clear it
				GopColl enemies$ = caster$.Go.Mind.TempGopColl1;
				enemies$.Clear();

				// find all the enemies
				#only(game)[[
				AIQuery.GetEnemiesOfGoInSphere(caster$.Go.Placement.Position, radius$, caster$.Go, enemies$);
				]];
										
				int i$ = 0;
				int iend$ = caster$.Go.Mind.TempGopColl1.Size();
					
				int enchanted$ = 0;
				Go temp$;
				bool canCastUpon$;

				// now loop through the characters
				while(i$ < iend$)
				{
					temp$ = caster$.Go.Mind.TempGopColl1.Get( i$ );
				
					// Can we cast on this thing 
//					if( owner.Go.Magic.IsCastableOn( temp$, true) )
					{
						// default to can cast
						canCastUpon$ = true;
						
						// check if the character is immune to this
						if( !StringTool.IsEmpty( immunity$ ) )
						{
							if( temp$.Common.Membership.Contains( immunity$ ) )
							{
								canCastUpon$ = false;
							}
						}

						// MRC 9/15/2003 We don't want to cast on other human-controlled
						// players in PVP.
						if(temp$.IsAnyHumanPartyMember())
						{
							canCastUpon$ = false;
						}

						if (canCastUpon$)
						{

							// create Omni version of the spell.
							GoCloneReq cloneReq$ = MakeGoCloneReq( Owner.go.Parent.Goid, owner.goid );
							cloneReq$.Omni = true;
							Goid new_spell$ = GoDb.SCloneGo( cloneReq$ );

							// send Omni version an Activate to get it started.
							PostWorldMessage( WE_REQ_ACTIVATE, caster$, new_spell$, MakeInt(temp$.Goid), 0 );
							enchanted$ += 1;
						}
					}
			        i$ += 1;
			    }
			}

			// Delete Normal version of the spell.
			SetState Finish$;
			return;
			
		}
		else if ( e$ == WE_REQ_ACTIVATE )
		{
			
			/////////////////////////////
			// Omni Go

			target$ = MakeGoid( msg$.GetData1() );
			caster$ = msg$.GetSendFrom();

			if( !target$.IsValid || !caster$.Isvalid )
			{
				SetState Finish$;
				return;
			}
			
			// Check to see if the enchantment has already been cast on this go
			if( target$.Go.Actor.HasGenericState( owner.Go.Magic.StateName ) )
			{
				SetState Finish$;
				return;
			}

			float freeze$ = Math.RandomFloat(1.0);
			if( ((target$.Go.Aspect.CurrentLife / target$.Go.Aspect.MaxLife) > freeze_threshold$) || (freeze$ > freeze_chance$) )
			{
				SetState Finish$;
				return;
			}

			if( target$.Go.HasMind() && target$.Go.HasActor() )
			{
				if( !target$.Go.Actor.HasGenericState( owner.Go.Magic.StateName ) )
				{
					// calculate our duration
					duration$ = owner.Go.Magic.EvaluateEffectDuration(caster$.Go, target$.Go);
					
					TryFreeze$( target$ );
					
					// Add the effected state so this can only happen once
					target$.Go.Actor.SAddGenericState( owner.Go.Magic.StateName, description$, duration$, caster$, owner.goid, owner.go.magic.GetMagicLevel( caster$.go ) );
	
					// we need to watch the guy to see if he is killed so we can shatter him.
					GoDb.StartWatching( owner.Goid, target$);

					// Start the visual
					SiegeFx.SRunScript( effect_script$, target$, caster$, effect_params$, owner.Goid, e$ );
						
					SetState Frozen$;
					return;
				}
			}

			
			// Start the visual
//			if( effect_script$ != "" )
//			{
//				SiegeFx.SRunMpScript( effect_script$, target$, caster$, effect_params$, owner.Goid, e$ );
//			}
		}
	}
}

state Frozen$
{
	event OnGoHandleCcMessage$( eWorldEvent e$, WorldMessage msg$ )
	{
		if( ( e$ == WE_KILLED ) && target$.IsValidMp() && ( target$ == msg$.GetSendTo() ) )
		{
			if(explode_script$ != "")
			{
				SiegeFx.SRunScript( explode_script$, target$, caster$, "", owner.Goid, e$ );
			}

			m_refreezeOK$ = false;
			
			target$.go.Aspect.SSetIsVisible( false );
		}
	}
	
	trigger OnTimer$( 1 )
	{
		m_refreezeOK$ = false;

	//		report.generic("freeze timer fired\n");
		if (target$.IsValid)
		{
//			report.generic("I want to thaw!!\n");
			TryThaw$( target$ );
			
			// remove the state so this can be affected again
			target$.Go.Actor.SRemoveGenericState( owner.Go.Magic.StateName );
			GoDb.StopWatching( owner.Goid, target$);
		}
		
		SetState Finish$;
	}
	event OnEnterState$
	{
//		report.genericf("setting freeze timer for %g seconds.\n", spell_duration$ );
		this.CreateTimer( 1, duration$ );
		
		// Create another timer to periodically refreeze the monster.  This is needed to
		// support multiplayer when the target leaves and reenters a player's frustum.
		this.CreateTimer( 2, 0.1);	
	}

	// Periodicallt re-freeze the target.
	trigger OnTimer$(2)
	{
		// If it's still OK to refreeze, then do so.
		if(m_refreezeOK$)
		{
			if(target$.IsValid())
			{
				TryFreeze$(target$);
			}

			this.CreateTimer( 2, 0.1);
		}
	}
}

state Finish$
{
	event OnEnterState$
	{
		SiegeFx.ClearVariables( owner.goid );
		
		PostWorldMessage( WE_REQ_DELETE, owner.Goid, owner.Goid, 5 );
	}
}